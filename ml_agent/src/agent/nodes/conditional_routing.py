"""
This module provides conditional routing logic for the agent workflow,
deciding the next node to invoke after the code execution step based on the
current agent state.

Responsibilities:
- Determine the appropriate next node depending on error presence,
  debugging attempts, and available outputs.
- Enable robust and dynamic workflow control within the agent graph.
"""

from agent.state import AgentState


def routing_from_code_executor(state: AgentState):
    """
    Determine the next node to execute after code execution based on agent state.

    Routing Rules:
    1. If an error occurred during code execution:
        - If current debugging attempts are below the maximum, route to the
          code debugger node.
        - Otherwise, route to the fallback handler node.
    2. If no error occurred:
        - If a visualization is available, route to the visualization display node.
        - Otherwise, route to the analysis responder node.

    Args:
        state: The current state of the agent, including:
            - error_message: Optional error message from code execution.
            - current_debugging_attempt: The current debugging attempt count.
            - max_debugging_attempts: Maximum allowed debugging attempts.
            - visualization: Optional visualization generated by code execution.

    Returns:
        str: The identifier of the next node to invoke in the agent workflow.
    """

    if state.error_message is not None:
        """..."""
        if state.current_debugging_attempt < state.max_debugging_attempts:
            return "code_debugger"
        return "fallback_handler"
    else:
        if state.visualization:
            return "visualization_display"
        return "analysis_responder"
