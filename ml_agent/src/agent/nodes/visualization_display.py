"""
This module defines the `VisualizationDisplayNode`, responsible for
rendering visualizations generated by the agent and updating the agent's state accordingly.

Responsibilities:
- Display the visualization content stored in the agent state.
- Wrap visualization content in an AIMessage for consistent rendering.
- Maintain proper agent state flow after displaying a visualization.
"""

from langchain.schema import AIMessage
from langchain.schema.runnable import RunnableLambda

from agent.state import AgentState


class VisualizationDisplayNode:
    """
    Node responsible for displaying a visualization in the agent workflow.

    This node integrates with the agent's state and ensures that
    visualizations are rendered in a format compatible with downstream
    components, such as streaming front-end interfaces.
    """

    @staticmethod
    def invoke(state: AgentState) -> AgentState:
        """
        Display the current visualization and update the agent state.

        Args:
            state: The current state of the agent, which includes:
                - visualization: The visualization content to display.
                - subtasks: Queue of remaining subtasks.

        Returns:
            AgentState: The updated state after displaying the visualization
                        and removing the completed subtask.
        """

        # Wrap the visualization content in an AIMessage for rendering
        visualization_display_model = RunnableLambda(
            lambda _: AIMessage(
                content=state.visualization, additional_kwargs={}, response_metadata={}
            )
        )
        # Invoke the model to display the visualization with image metadata
        visualization_display_model.invoke("...", config={"metadata": {"image": True}})

        return state
